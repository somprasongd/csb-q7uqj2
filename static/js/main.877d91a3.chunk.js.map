{"version":3,"sources":["App.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","imageURL","setImageURL","sigCanvas","useRef","clear","current","save","img","getTrimmedCanvas","toDataURL","console","log","download","resizedCanvas","document","createElement","resizedContext","getContext","height","width","canvas","drawImage","blob","dataURL","parts","split","contentType","raw","window","atob","rawLength","length","uInt8Array","Uint8Array","i","charCodeAt","Blob","type","dataURLToBlob","url","URL","createObjectURL","a","style","href","body","appendChild","click","revokeObjectURL","react_default","className","reactjs_popup_es","modal","trigger","closeOnDocumentClick","close","Fragment","build_default","ref","canvasProps","onClick","src","alt","display","margin","border","rootElement","getElementById","ReactDOM","render","src_App"],"mappings":"wNAiHeA,MA3Gf,WACE,IAAAC,EAAgCC,mBAAS,MAAzCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOK,EAAPH,EAAA,GAAiBI,EAAjBJ,EAAA,GAEMK,EAAYC,iBAAO,IAInBC,EAAQ,kBAAMF,EAAUG,QAAQD,SAKhCE,EAAO,WACX,IAAIC,EAAML,EAAUG,QAAQG,mBAAmBC,UAAU,aACzDC,QAAQC,IAAIJ,GACZN,EAAYM,IAGRK,EAAW,WAEf,IAAIC,EAAgBC,SAASC,cAAc,UACvCC,EAAiBH,EAAcI,WAAW,MAE9CJ,EAAcK,OAAS,KACvBL,EAAcM,MAAQ,MAEtB,IAAIC,EAASlB,EAAUG,QAAQG,mBAE/BQ,EAAeK,UAAUD,EAAQ,EAAG,EAAG,IAAK,IAC5C,IAEME,EAcR,SAAuBC,GAQrB,IANA,IAAMC,EAAQD,EAAQE,MAAM,YACtBC,EAAcF,EAAM,GAAGC,MAAM,KAAK,GAClCE,EAAMC,OAAOC,KAAKL,EAAM,IACxBM,EAAYH,EAAII,OAChBC,EAAa,IAAIC,WAAWH,GAEzBI,EAAI,EAAGA,EAAIJ,IAAaI,EAC/BF,EAAWE,GAAKP,EAAIQ,WAAWD,GAGjC,OAAO,IAAIE,KAAK,CAACJ,GAAa,CAAEK,KAAMX,IA1BzBY,CAFOzB,EAAcJ,aAG5B8B,EAAMX,OAAOY,IAAIC,gBAAgBnB,GAEjCoB,EAAI5B,SAASC,cAAc,KACjC2B,EAAEC,MAAQ,gBACVD,EAAEE,KAAOL,EACTG,EAAE9B,SAAW,gBAEbE,SAAS+B,KAAKC,YAAYJ,GAC1BA,EAAEK,QAEFnB,OAAOY,IAAIQ,gBAAgBT,IAkB7B,OACEU,EAAAP,EAAA3B,cAAA,OAAKmC,UAAU,OACbD,EAAAP,EAAA3B,cAAA,mCACAkC,EAAAP,EAAA3B,cAACoC,EAAA,EAAD,CACEC,OAAK,EACLC,QAASJ,EAAAP,EAAA3B,cAAA,oCACTuC,sBAAsB,GAErB,SAACC,GAAD,OACCN,EAAAP,EAAA3B,cAAAkC,EAAAP,EAAAc,SAAA,KACEP,EAAAP,EAAA3B,cAAC0C,EAAAf,EAAD,CACEgB,IAAKxD,EACLyD,YAAa,CACXT,UAAW,qBAIfD,EAAAP,EAAA3B,cAAA,UAAQ6C,QAAShD,GAAjB,YACAqC,EAAAP,EAAA3B,cAAA,UAAQ6C,QAAStD,GAAjB,QACA2C,EAAAP,EAAA3B,cAAA,UAAQ6C,QAASxD,GAAjB,SACA6C,EAAAP,EAAA3B,cAAA,UAAQ6C,QAASL,GAAjB,YAINN,EAAAP,EAAA3B,cAAA,WACAkC,EAAAP,EAAA3B,cAAA,WAGCf,EACCiD,EAAAP,EAAA3B,cAAAkC,EAAAP,EAAAc,SAAA,KACEP,EAAAP,EAAA3B,cAAA,OACE8C,IAAK7D,EACL8D,IAAI,eACJnB,MAAO,CACLoB,QAAS,QACTC,OAAQ,SACRC,OAAQ,kBACR9C,MAAO,WAGX8B,EAAAP,EAAA3B,cAAA,YAEA,OCvGJmD,EAAcpD,SAASqD,eAAe,QAC5CC,IAASC,OAAOpB,EAAAP,EAAA3B,cAACuD,EAAD,MAASJ","file":"static/js/main.877d91a3.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport Popup from \"reactjs-popup\";\r\nimport SignaturePad from \"react-signature-canvas\";\r\nimport \"./App.css\";\r\nimport \"./sigCanvas.css\";\r\n\r\nfunction App() {\r\n  const [imageURL, setImageURL] = useState(null); // create a state that will contain our image url\r\n\r\n  const sigCanvas = useRef({});\r\n\r\n  /* a function that uses the canvas ref to clear the canvas \r\n  via a method given by react-signature-canvas */\r\n  const clear = () => sigCanvas.current.clear();\r\n\r\n  /* a function that uses the canvas ref to trim the canvas \r\n  from white spaces via a method given by react-signature-canvas\r\n  then saves it in our state */\r\n  const save = () => {\r\n    let img = sigCanvas.current.getTrimmedCanvas().toDataURL(\"image/png\");\r\n    console.log(img);\r\n    setImageURL(img);\r\n  };\r\n\r\n  const download = () => {\r\n    // resize\r\n    var resizedCanvas = document.createElement(\"canvas\");\r\n    var resizedContext = resizedCanvas.getContext(\"2d\");\r\n\r\n    resizedCanvas.height = \"91\";\r\n    resizedCanvas.width = \"192\";\r\n\r\n    var canvas = sigCanvas.current.getTrimmedCanvas();\r\n\r\n    resizedContext.drawImage(canvas, 0, 0, 192, 91);\r\n    var myResizedData = resizedCanvas.toDataURL();\r\n\r\n    const blob = dataURLToBlob(myResizedData);\r\n    const url = window.URL.createObjectURL(blob);\r\n\r\n    const a = document.createElement(\"a\");\r\n    a.style = \"display: none\";\r\n    a.href = url;\r\n    a.download = \"signature.png\";\r\n\r\n    document.body.appendChild(a);\r\n    a.click();\r\n\r\n    window.URL.revokeObjectURL(url);\r\n  };\r\n\r\n  function dataURLToBlob(dataURL) {\r\n    // Code taken from https://github.com/ebidel/filer.js\r\n    const parts = dataURL.split(\";base64,\");\r\n    const contentType = parts[0].split(\":\")[1];\r\n    const raw = window.atob(parts[1]);\r\n    const rawLength = raw.length;\r\n    const uInt8Array = new Uint8Array(rawLength);\r\n\r\n    for (let i = 0; i < rawLength; ++i) {\r\n      uInt8Array[i] = raw.charCodeAt(i);\r\n    }\r\n\r\n    return new Blob([uInt8Array], { type: contentType });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Signature Pad Example</h1>\r\n      <Popup\r\n        modal\r\n        trigger={<button>Open Signature Pad</button>}\r\n        closeOnDocumentClick={false}\r\n      >\r\n        {(close) => (\r\n          <>\r\n            <SignaturePad\r\n              ref={sigCanvas}\r\n              canvasProps={{\r\n                className: \"signatureCanvas\"\r\n              }}\r\n            />\r\n            {/* Button to trigger save canvas image */}\r\n            <button onClick={download}>Download</button>\r\n            <button onClick={save}>Save</button>\r\n            <button onClick={clear}>Clear</button>\r\n            <button onClick={close}>Close</button>\r\n          </>\r\n        )}\r\n      </Popup>\r\n      <br />\r\n      <br />\r\n      {/* if our we have a non-null image url we should \r\n      show an image and pass our imageURL state to it*/}\r\n      {imageURL ? (\r\n        <>\r\n          <img\r\n            src={imageURL}\r\n            alt=\"my signature\"\r\n            style={{\r\n              display: \"block\",\r\n              margin: \"0 auto\",\r\n              border: \"1px solid black\",\r\n              width: \"200px\"\r\n            }}\r\n          />\r\n          <br />\r\n        </>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}